// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static Array towToThe;
    static int screen;
    static boolean color;
    /** Initializes the Screen. */
    function void init() {
        var int i, binary;
        let screen = 16384;
        let color = true;
        let i = 0;
        let binary = 1;
        let towToThe = Array.new(16);
        while (i < 16) {
            let towToThe[i] = binary;
            let binary = binary + binary;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = screen;
        while (i < 24576) {
            do Memory.poke(i, 0);
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, binary, i;
        let address = (32 * y) + (x / 16) + screen;
        let value = Memory.peek(address);
        let binary = 1;
        let i = x & 15;
        let binary = towToThe[i];
        if (color) {
            let value = value | binary;
        }
        else {
            let value = value & (-1 - binary);
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff;
        if (y1 > y2) {
            let a = x1;
            let x1 = x2;
            let x2 = a;
            let a = y1;
            let y1 = y2;
            let y2 = a;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;
        let a = 0;
        let b = 0;
        if (dx = 0) {
            let dy = Math.abs(dy);
            while (~(b = dy)) {
                do Screen.drawPixel(x1, y1+b);
                let b = b + 1;
            }
            return;
        }
        if (dy = 0) {
            let x1 = Math.min(x1, x2);
            let dx = Math.abs(dx);
            while (~(a = dx)) {
                do Screen.drawPixel(x1+a, y1);
                let a = a + 1;
            }
            return;
        }
        if (dx > 0) {
            while ((~(a = dx)) & (~(b = dy))) {
                do Screen.drawPixel(x1+a, y1+b);
                if (diff > 0) {
                    let b = b + 1;
                    let diff = diff - dx;
                }
                else {
                    let a = a + 1;
                    let diff = diff + dy;
                }
            }
        }
        else {
            while ((~(a = dx)) & (~(b = dy))) {
                do Screen.drawPixel(x1+a, y1+b);
                if (diff > 0) {
                    let b = b + 1;
                    let diff = diff + dx;
                }
                else {
                    let a = a - 1;
                    let diff = diff + dy;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int bottom, top;
        let bottom = Math.min(y1, y2);
        let top = Math.max(y1, y2);
        while (~(bottom = top)) {
            do Screen.drawLine(x1, bottom, x2, bottom);
            let bottom = bottom + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var dynt dy;
        let dy = -r;
        if (r > 181) {
            return;
        }
        while (~(dy = r)) {
            do Screen.drawLine(x-Math.sqrt((r*r)-(dy*dy)), y+dy, x+Math.sqrt((r*r)-(dy*dy)), y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
