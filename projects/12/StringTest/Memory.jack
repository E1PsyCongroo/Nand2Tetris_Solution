// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram;
    static Array heap;
    static Array free;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;            // heapBase
        let free = heap;
        let free[0] = null;            // next
        let free[1] = 14334;        // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block;
        var int segment;
        let segment = free;
        while (~(segment = 0)) {                        // while (segment != null)
            if (segment[1] > (size + 1)) {              // if (segment.size >= size + 2)
                let segment[1] = segment[1] - size -2;  // segment.size -= size + 2
                let block = segment + segment[1] + 2;   // block = segment + segment.size + 2
                let block[0] = 0;
                let block[1] = size;
                return block;
            }
            let segment = segment[0];                   // segment = segment.next
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int temp;
        let temp = free[0];             // temp = free.next
        let free[0] = o;                // free.next = o;
        let o[0] = temp;                // o.next = temp
        return;
    }
}
