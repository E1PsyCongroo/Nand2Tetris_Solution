// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length;
    field Array str;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let str = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        let str[length] = 0;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean negtive;
        var int result, i;
        let result = 0;
        let i = 0;
        let negtive = false;
        if (str[i] = 45) {
            let negtive = true;
            let i = i + 1;
        }
        while (i < length()) {
            let result = result * 10 + (str[i]-48);
            let i = i + 1;
        }
        if (negtive) {
            return -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean negtive;
        var int i;
        let negtive = false;
        if (val < 0) {
            let val = Math.abs(val);
            let negtive = true;
        }
        if (val < 10) {
            let length = 0;
            let str[length] = val + 48;
            let length = length + 1;
        }
        else {
            do setInt(val/10);
            let str[length] = val - ((val/10) * 10) + 48;
            let length = length + 1;
        }
        if (negtive) {
            let i = length;
            while (i > 0) {
                let str[i] = str[i-1];
                let i = i - 1;
            }
            let str[0] = 45;
            let length = length + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
